#!/opt/local/bin/ruby

require 'rubygems'
require 'term/ansicolor'
include Term::ANSIColor

def split_words(buffer)
  buffer.scan(/\S+/)
end

def find_fuzzy(buffer, search_keyword)
  buffer_chars = buffer.downcase.split(//)
  search_chars = search_keyword.downcase.split(//)

  start_point = nil
  end_point = nil
  i = 0
  buffer_chars.each_with_index{ |c, index|
    #STDERR.puts "buffer: #{buffer}, keyword: #{search_keyword}, #{c} <=> #{search_chars[i]}, i: #{i}"
    if c == search_chars[i]
      if start_point.nil?
        start_point = index
      end

      end_point = index
      i += 1
    end
  }

  if search_chars.size == i
    ## みつかったとき
    # start_pointまで普通に表示
    print buffer_chars[0...start_point].join('')
    print red{buffer_chars[start_point..end_point].join('')}
    print buffer_chars[end_point+1..-1].join('')
    puts ""
  else
  end
end

if $0 == __FILE__
  require 'optparse'

  options={
    :word_split_flag => false
  }
  ARGV.options{|opt|
    opt.on("-w"){
      options[:word_split_flag] = true
    }
  }

  keyword=ARGV.shift
  ARGF.each{ |line|
    line.chomp!

    if options[:word_split_flag]
      words = split_words(line)
      words.each{ |word|
        find_fuzzy(word, keyword)
      }
    else
      find_fuzzy(line, keyword)
    end
  }
end
